---

  - name: Check if GI is already installed
    shell: grep "{{ oracle_home_gi }}" "{{ oracle_inventory_loc }}/ContentsXML/inventory.xml" |wc -l
    tags:
    - checkifgiinstall
    register: checkgiinstall

  - name: Mount nfs share with installation media
    mount: src="{{ nfs_server_sw }}:{{ nfs_server_sw_path }}" name={{ oracle_stage_remote }} fstype=nfs state=mounted
    tags:
      - nfsmountgi
    when: install_from_nfs

  - name: Add new dotprofile (GI)
    template: src=dotprofile-gi.j2 dest={{ grid_user_home }}/{{ oracle_profile_name_gi }} owner={{ grid_install_user }} group={{ oracle_group }} mode=755 backup=yes
    tags:
    - dotprofilegi

  - name: Create common directories
    file: dest={{ item.name }} mode={{ item.mode}} owner={{ item.owner }} group={{ item.group }} state=directory
    with_items: "{{oracle_directories}}"
    tags:
      - directories
      
  - name: Create stage directory (version specific)
    file: dest={{ oracle_stage }}/{{ item.version }} mode=775 owner="{{ oracle_user }}" group={{ oracle_group }} state=directory
    become: yes
    with_items: "{{oracle_sw_image_gi}}"
    when:  oracle_install_version_gi  ==  item.version
    tags:
      - directories

  - name: Create ORACLE_HOME directory (GI)
    file: dest={{ oracle_home_gi }} owner="{{ grid_install_user }}" group={{ oracle_group }} state=directory mode=775
    become: yes
    tags:
      - directories
    when: checkgiinstall.stdout != "1"

  - name: Copy oracle installfiles to server (GI) (web)
    get_url: url={{ oracle_sw_source_www }}/{{ item.filename }} dest={{ oracle_stage }} mode=775
    with_items: "{{oracle_sw_image_gi}}"
    become: yes
    become_user: "{{ grid_install_user }}"
    tags:
      - oragridsw
    when: checkgiinstall.stdout != "1" and not is_sw_source_local and oracle_install_version_gi  == item.version and oracle_sw_copy

  - name: Copy oracle installfiles to server (GI) (local)
    copy: src={{ oracle_sw_source_local }}/{{ item.filename }} dest={{ oracle_stage }} mode=775
    with_items: "{{oracle_sw_image_gi}}"
    become: yes
    become_user: "{{ grid_install_user }}"
    tags:
      - oragridsw
    when: checkgiinstall.stdout != "1" and is_sw_source_local and oracle_install_version_gi == item.version and oracle_sw_copy


  - include: "{{ oracle_install_version_gi }}.yml"

  - name: Check if stuff is running
    shell: "{{ oracle_home_gi }}/bin/crsctl stat res -t"
    tags:
     - crsctl
    register: crsctl
    run_once: "{{ configure_cluster}}"
    when: checkgiinstall.stdout != "1"

  - debug: var=crsctl.stdout_lines
    tags:
     - crsctl
    run_once: "{{ configure_cluster}}"
    when: checkgiinstall.stdout != "1"

  - name: Update Nodelist, set CRS=TRUE
    shell: "{{ oracle_home_gi }}/oui/bin/runInstaller -updateNodeList ORACLE_HOME={{ oracle_home_gi }} CRS=TRUE"
    become: yes
    become_user: "{{ grid_install_user }}"
    run_once: "{{ configure_cluster}}"
    when: checkgiinstall.stdout != "1"
    ignore_errors: true
    tags:
      - updatenodelist

  - name: Add additional info to glogin.sql (1)
    lineinfile: dest="{{ oracle_home_gi }}/sqlplus/admin/glogin.sql" line='set sqlprompt "_user @ _connect_identifier:>"' backup=yes
    tags:
      - glogingi
    when: checkgiinstall.stdout != "1"

  - name: Add additional info to glogin.sql (2)
    lineinfile: dest="{{ oracle_home_gi }}/sqlplus/admin/glogin.sql" line='set time on' backup=yes
    tags:
      - glogingi
    when: checkgiinstall.stdout != "1"

  - name: Check opatch lsinventory (GI)
    shell: "{{ oracle_home_gi }}/OPatch/opatch lsinventory"
    become: yes
    become_user: "{{ grid_install_user }}"
    environment: "{{oracle_env}}"
    register: opatchls
    tags:
     - opatchls
    when: checkgiinstall.stdout != "1"

  - name: Check opatch lsinventory (GI)
    debug: var=opatchls.stdout_lines
    tags:
     - opatchls
    when: checkgiinstall.stdout != "1"

  - name: Check olsnodes (GI)
    shell: "{{ oracle_home_gi }}/bin/olsnodes -a -n -s -t"
    become: yes
    become_user: "{{ grid_install_user }}"
    when: oracle_gi_cluster_type |upper == 'FLEX' and '12' in oracle_install_version_gi
    register: olsnodes
    tags:
     - olsnodes

  - name: Check olsnodes (GI)
    debug: var=olsnodes.stdout_lines
    when: oracle_gi_cluster_type|upper == 'FLEX' and '12' in oracle_install_version_gi
    tags:
     - olsnodes

  - name: Unmount nfs share with installation media
    mount: src="{{ nfs_server_sw }}:{{ nfs_server_sw_path }}" name={{ oracle_stage_remote }} fstype=nfs state=absent
    when: install_from_nfs
    tags: nfsunmountgi
