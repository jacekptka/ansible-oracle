---
# todo:
# - Patchinstallation ermitteln
#   Liste der installierten Patches wird benoetigt, um Doppelinstallationen zu vermeiden.
#
# Restrictions:
# - Standby Databases
#   The role ignores the state of a database. That results in problems, when datapatch is started
# - old/new state of database is ignored in Single-Instace
#   The database is stopped before opatch apply and started before datapatch. It won't be stopped
#   after datapach if the instance was not running before!

  - name: Verify Ansible Version <= 2.4
    assert:
      that: "ansible_version.full | version_compare('2.5', '<')"
      msg: >
          "Ansible 2.5 doesn't work with set_facts in this role at the moment. Use Ansible <= 2.4"
  # environment is needed for OL/SLES, due to different directories for executables...
  # grep LOC= in /u01/app/oraInventory/ContentsXML/inventory.xml and search for LOC=
  - name: Get ORACLE_HOMEs from oraInventory
    shell: grep "LOC=" $(cat /etc/oraInst.loc | grep inventory_loc | cut -d"=" -f2)/ContentsXML/inventory.xml | sed 's#.*LOC=##g' | cut -d" " -f1 | sed 's#"##g'
    environment:
      - PATH: /bin:/usr/bin
    register: inventory_oh_list
    tags:
      - gethomes
      - check_applied_patches
      - datapatchdbs
      - opatchapply
      - opatchprereq
      - stopalldbs

  # we only need the homes with are usable as oracle_user
  - name: Check owner of SQLPlus for inventory_oh_list
    ignore_errors: True
    file: path={{item}}/bin/sqlplus owner="{{ oracle_user }}" state=file
    with_items:
      - "{{inventory_oh_list.stdout_lines}}"
    register: usable_inventory_oh_list
    tags:
      - check_applied_patches
      - datapatchdbs
      - opatchapply
      - opatchprereq
      - stopalldbs

  - name: Set facts for ORACLE_HOMEs
    no_log: true
    set_fact:
      host_oracle_home: "{{host_oracle_home|default([]) + [{ 'oracle_home': item.item}]}}"
    with_items:
       - "{{usable_inventory_oh_list['results']}}"
    when: item.changed == false
    tags:
      - check_applied_patches
      - datapatchdbs
      - opatchapply
      - opatchprereq
      - stopalldbs

  - name: Set facts for patches and ORACLE_HOME with apply=true
    no_log: true
    set_fact: 
      patch_oh_list: "{{patch_oh_list|default([]) + [{'patchid': item.0.patchid, 'apply': item.1.apply|default(false), 'path': item.1.path, 'subpath': item.0.subpath|default(''), 'version': item.0.version, 'opatchauto': item.0.opatchauto, 'postsql': item.0.postsql|default('') }] }}"
    with_subelements:
      - "{{oracle_patch_list}}"
      - ORACLE_HOME
    when: item.1 is defined and item.1.apply | default(false)
    tags:
      - check_applied_patches
      - opatchautoapply
      - opatchapply
      - opatchprereq
      - stopalldbs
      - opatchsql

  - name: Mount nfs share with installation media
    mount: src="{{ nfs_server_sw }}:{{ nfs_server_sw_path }}" name={{ oracle_stage_remote }} fstype=nfs state=mounted
    tags:
      - nfsmount
      - updateopatch
      - opatchapply
      - opatchprereq
    when: install_from_nfs

  - name: Create stage directory
    file: dest={{ oracle_psu_stage }}/{{ item.version }} mode=775 owner={{ oracle_user }} group={{ oracle_group }} state=directory
    with_items:
       - "{{oracle_patch_list}}"
    tags:
      - directoriespsu

#  - name: Extract RDBMS psu files to stage-area
#    unarchive: src={{ oracle_stage }}/{{ item.0.filename }}  dest={{ oracle_psu_stage }}/{{ oracle_install_version_gi }} copy=no
#    become: yes
#    become_user: "{{ oracle_user }}"
#    with_together:
#       - "{{oracle_sw_image_gi_psu}}"
#       - "{{gi_applied_patches.results}}"
#    when: oracle_sw_unpack|bool and "{{ item.0.version }}" == "{{ oracle_install_version_gi }}" and not {{ item.1.stdout }} != 0
#    tags:
#      - oragridpsuunpack

#  - name: set facts for unique ORACLE_HOME paths
#    set_fact:
#      db_oracle_home_list: "{{oracle_databases.oracle_home|unique }}"
#    tags:
#      - setfact


  # We have to remove the old OPatch to reduce the number of copy loops at later time.
  # Remember that many Database with same ORACLE_HOME may exists
  - name: Remove existing OPatch
    no_log: true
    file: path={{oracle_home_db}}/OPatch state=absent
    become: yes
    become_user: "{{ oracle_user }}"
    with_together:
      - "{{oracle_databases}}"
      - ""
    tags:
      - updateopatch

  # use test -d to copy the OPatch only one time for many databases in oracle_databases!
  - name: Distribute latest opatch
    shell: "test -d {{oracle_home_db}}/OPatch || unzip -d {{oracle_home_db}} {{opatcharchive}}"
    with_together:
      - "{{oracle_databases}}"
      - ""
    become: yes
    become_user: "{{ oracle_user }}"
    tags:
      - updateopatch

  - name: Configure ocm.rsp (1)
    template: src=ocmrsp_helper.sh  dest={{ oracle_stage }}/rsp/ocmrsp_helper.sh mode=0755
    with_together:
      - "{{oracle_databases}}"
      - ""
    become: yes
    become_user: "{{ oracle_user }}"
    when: ('11.2' in item.0.oracle_version_db)
    tags:
      - ocmconfig

  - name: Configure ocm.rsp (2)
    shell: "{{ oracle_stage }}/rsp/ocmrsp_helper.sh {{oracle_home_db}} {{oracle_home_db}}/OPatch//ocm.rsp"
    with_together:
      - "{{oracle_databases}}"
      - ""
    when: ('11.2' in item.0.oracle_version_db)
    become: yes
    become_user: "{{ oracle_user }}"
    tags:
      - ocmconfig

  - name: Check which RDBMS patches are applied
    shell: "{{ item.oracle_home }}/OPatch/opatch lspatches -oh {{ item.oracle_home }} | grep ';'| cut -d';' -f1"
    become: yes
    become_user: "{{ oracle_user }}"
    with_items:
       - "{{host_oracle_home}}"
    register: db_applied_patches
    tags:
      - check_applied_patches

  - name: Set facts for applied Patches
    no_log: true
    set_fact:
      patch_applied_list: "{{patch_applied_list|default([]) + [{ 'oracle_home': item.0.item['oracle_home'], 'patch': item.1 }]}}"
    with_subelements: 
       - "{{db_applied_patches.results}}"
       - stdout_lines
    when: db_applied_patches is defined
    tags:
      - check_applied_patches

  - debug: msg={{item}}
    with_items:
      - "{{patch_applied_list}}"
    tags:
      - check_applied_patches
    when: patch_applied_list is defined

  - name: Copy helper script to stage
    copy: src={{ item }} dest={{ oracle_rsp_stage}} mode=755 
    with_items:
      - "datapatch_dbs_in_home.sh"
#      - "stop_dbs_in_home.sh"
    tags:
      - copyrsp
      - datapatchdbs
      - stopalldbs

  # autostartup_service => make sure the service was installed
  - name: Stop all Databases & Listener on systemd/init.d
    service: name=oracle-rdbms state=stopped
    when: autostartup_service and oracle_install_option_gi is not defined
    tags:
      - stopalldbs
      - opatchapply

  - name: Check requirements for Patches with OPatch (CheckConflictAgainstOHWithDetail )
    shell: "{{item.path}}/OPatch/opatch prereq CheckConflictAgainstOHWithDetail -silent -oh {{item.path}} -ph {{patchpath}}"
    with_items:
       - "{{patch_oh_list}}"
    become: yes
    become_user: "{{ oracle_user }}"
    when: not item.opatchauto and item.apply and "12." in item.version 
    register: opatchprereq2
    changed_when: "'failed' in opatchprereq2.stdout"
    tags:
      - opatchprereq
      - opatchapply

  - debug: msg={{item.stdout_lines}}
    with_items:
       - "{{opatchprereq2.results[0]}}"
    when: opatchprereq2 is defined and item.changed
    tags:
      - opatchprereq
      - opatchapply

  - name: Check requirements for Patches with OPatch (CheckActiveFilesAndExecutables)
    shell: "{{item.path}}/OPatch/opatch prereq CheckActiveFilesAndExecutables -silent -oh {{item.path}} -ph {{patchpath}}"
    with_items:
       - "{{patch_oh_list}}"
    become: yes
    become_user: "{{ oracle_user }}"
    when: '"12." in  item.version  and not item.opatchauto and item.apply and oracle_install_option_gi is not defined'
    register: opatchprereq1
    changed_when: "'failed' in opatchprereq1.stdout"
    tags:
      - opatchprereq
      - opatchapply

  - debug: msg={{item.stdout_lines}}
    with_items:
       - "{{opatchprereq1.results[0]}}"
    when: opatchprereq1 is defined and item.changed
    tags:
      - opatchprereq
      - opatchapply

  - name: Stop execution when CheckActiveFilesAndExecutables reports problems (non GI)
    fail: msg="Please review the debug output for reasons!"
    with_items:
       - "{{opatchprereq1.results[0]}}"
    when: item.changed and oracle_install_option_gi is not defined
    tags:
      - opatchprereq
      - opatchapply

  - name: Apply Patches with OPatch opatchauto
    shell: "{{item.path}}/OPatch/opatchauto apply -oh {{item.path}}  {{patchpath}}"
    with_items:
       - "{{patch_oh_list}}"
    become: yes
    when: item.opatchauto | default(false) and item.apply | default(false)
    register: opatchautoapplyresult
    tags:
      - opatchautoapply

  - debug: msg={{item.stdout_lines}}
    with_items:
       - "{{opatchautoapplyresult.results[0]}}"
    when: opatchautoapplyresult is defined and item.stdout_lines is defined and item.changed
    tags:
      - opatchautoapply

  - debug: msg={{patch_oh_list}}
    tags:
      - opatchapply

  - name: Apply Patches with OPatch apply
    shell: "{{item.path}}/OPatch/opatch apply -silent {{ocmrfparam}} -oh {{item.path}} {{patchpath}}"
    with_items:
       - "{{patch_oh_list}}"
    become: yes
    become_user: "{{ oracle_user }}"
    when: not item.opatchauto and item.apply
    failed_when: "'failed' in opatchapplyresult.stdout"
    changed_when: not "'These patch(es) will be skipped' in opatchapplyresult.stdout"
    register: opatchapplyresult
    tags:
      - opatchapply

  - debug: var={{item.stdout_lines}}
    with_items:
       - "{{opatchapplyresult.results}}"
    when: opatchapplyresult is defined and item.stdout_lines is defined
    tags:
      - opatchautoapply
      - opatchapply

  - name: Create post operation sql scripts
    template: src=opatch_post.sql.j2  dest={{ oracle_stage }}/rsp/opatch_post_{{ item.patchid }}.sql mode=0644
    with_items:
       - "{{patch_oh_list}}"
    when: not item.opatchauto and item.apply and item.postsql != ''
    tags:
      - opatchsql

  # autostartup_service => make sure the service was installed
  # start everything before post sql
  - name: Start all Databases & Listener on systemd/init.d
    service: name=oracle-rdbms state=started
    when: autostartup_service and oracle_install_option_gi is not defined
    tags:
      - opatchsql

  - name: execute post sql
    shell: "{{oracle_home_db}}/bin/sqlplus -L -S / as sysdba @{{ oracle_stage }}/rsp/opatch_post_{{ item.1.patchid }}.sql"
    environment:
      - ORACLE_HOME: "{{oracle_home_db}}"
      - ORACLE_SID:  "{{item.0.oracle_db_name}}"
      - ORACLE_BASE: "{{oracle_base}}"
    become: yes
    become_user: "{{ oracle_user }}"
    register: postsqlresult
    with_nested:
       - "{{oracle_databases}}"
       - "{{patch_oh_list}}"
    when: oracle_install_option_gi is not defined and item.1.path == oracle_home_db and item.1.postsql != ''
    tags:
      - opatchsql

  - debug: msg={{item}}
    with_items:
       - "{{postsqlresult.results}}"
    when: item.changed and postsqlresult is defined
    tags:
      - opatchsql

  - name: Execute datapatch in every Home
    shell: "{{oracle_rsp_stage}}/datapatch_dbs_in_home.sh {{item.oracle_home}}"
    environment:
      - PATH: /bin:/usr/bin
    with_items:
       - "{{host_oracle_home}}"
    become: yes
    become_user: "{{ oracle_user }}"
    register: datapatchresult
    when: oracle_install_option_gi is not defined
    tags:
      - stopalldbs
      - opatchapply
      - datapatchdbs

  - debug: var={{item.stdout_lines}}
    with_items:
       - "{{datapatchresult.results}}"
    tags:
      - stopalldbs
      - opatchapply
      - datapatchdbs

#  - name: Check opatch lspatches
#    shell: "{{ item.oracle_home }}/OPatch/opatch lspatches"
#    with_items:
#       - "{{oracle_databases}}"
#    become: yes
#    become_user: "{{ oracle_user }}"
#    register: opatchls
#    tags:
#      - opatchls
#      - opatchapply
#      - opatchautoapply

#  - debug: var=item.stdout_lines
#    with_items: "{{opatchls.results}}"
#    when: opatchls is defined
#    tags:
#      - opatchapply
#      - opatchautoapply
#      - opatchls

